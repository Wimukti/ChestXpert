import argparse
import io
import json

from flask import Flask, request, jsonify
# Initialize Flask app
import base64
import os
import pandas as pd
from PIL import Image
from src.models import ModelFactory
from src.generator import CheXpertDataGenerator
from keras.preprocessing import image
from src.models import DenseNet, ModelFactory
from skimage.transform import resize
import numpy as np
import keras
from sklearn.metrics.ranking import roc_auc_score
import cv2
import matplotlib.pyplot as plt
import tensorflow as tf
from io import BytesIO

graph = tf.get_default_graph()

def computeAUROC(dataGT, dataPRED, classCount):
    outAUROC = []
    for i in range(classCount):
        try:
            outAUROC.append(roc_auc_score(dataGT[:, i], dataPRED[:, i]))
        except ValueError:
            pass
    return outAUROC


def predict_single_image(encoded_image_string, model):
    img_width, img_height = 224, 224

    decoded_image = base64.b64decode(encoded_image_string)
    img = Image.open(BytesIO(decoded_image))
    img = img.resize((img_width, img_height))

    image_array = np.asarray(img.convert("RGB"))
    image_array = image_array / 255.
    image_array = resize(image_array, (img_width, img_height))
    x = np.expand_dims(image_array, axis=0)
    images = np.vstack([x])
    classes = model.predict_on_batch(images)
    probab = classes[0]

    return probab



import cv2
import base64
import numpy as np



def generate_gradcam(encoded_image_string, model):
    img_width, img_height = 224, 224

    decoded_image = base64.b64decode(encoded_image_string)
    img = Image.open(BytesIO(decoded_image))
    img = img.resize((img_width, img_height))
    image_array = np.asarray(img.convert("RGB"))
    image_array = image_array / 255.
    image_array = resize(image_array, (224, 224))
    x = np.expand_dims(image_array, axis=0)
    images = np.vstack([x])

    # Predict the class probabilities
    preds = model.predict(images)
    class_idx = np.argmax(preds[0])
    class_output = model.output[:, class_idx]

    # Get the last convolutional layer in the model
    last_conv_layer = model.get_layer('bn')

    # Generate the gradient-weighted class activation maps (Grad-CAM)
    grads = keras.backend.gradients(class_output, last_conv_layer.output)[0]
    pooled_grads = keras.backend.mean(grads, axis=(0, 1, 2))
    iterate = keras.backend.function([model.input], [pooled_grads, last_conv_layer.output[0]])
    pooled_grads_value, conv_layer_output_value = iterate([images])

    for i in range(last_conv_layer.output_shape[3]):
        conv_layer_output_value[:, :, i] *= pooled_grads_value[i]

    # Average the weighted feature maps along the channel dimension
    heatmap = np.mean(conv_layer_output_value, axis=-1)
    heatmap = np.maximum(heatmap, 0)
    heatmap /= np.max(heatmap)

    # Invert the colors of the heatmap
    inverted_heatmap = heatmap

    # Resize the heatmap to the original image size
    heatmap = cv2.resize(inverted_heatmap, (img_width, img_height))

    # Apply heatmap visualization with inverted colors
    heatmap = np.uint8(255 * heatmap)
    heatmap = cv2.applyColorMap(heatmap, cv2.COLORMAP_JET)

    # Convert the image array to 8-bit unsigned integer (CV_8U)
    image_array = np.uint8(255 * image_array)

    # Apply Grad-CAM visualization on the original image
    superimposed_img = cv2.addWeighted(image_array, 0, heatmap, 1, 0)
    ret, buffer = cv2.imencode('.jpg', superimposed_img)
    base64_str = base64.b64encode(buffer).decode('utf-8')

    return base64_str



# parser = argparse.ArgumentParser(description='Testing...')
# parser.add_argument('--data-dir', help='Input dataset directory.', type=str, default='.')
# parser.add_argument('--model-file-path', help='Path to model', type=str,
#                     default='./codalab/src/best_weights_1687481048.5704129.h5')
# parser.add_argument('--model-type', help='Model architecture to train', type=str, default='DenseNet121')
#
# args = parser.parse_args()
valid_file = os.path.join(".", 'CheXpert-v1.0-small/valid.csv')
# class_names = ['Atelectasis', 'Cardiomegaly', 'Consolidation', 'Edema', 'Pleural Effusion']
class_names = ['No Finding', 'Enlarged Cardiomediastinum', 'Cardiomegaly', 'Lung Opacity',
               'Lung Lesion', 'Edema', 'Consolidation', 'Pneumonia', 'Atelectasis', 'Pneumothorax',
               'Pleural Effusion', 'Pleural Other', 'Fracture', 'Support Devices']
# class_names = ['No Finding', 'Enlarged Cardiomediastinum', 'Cardiomegaly', 'Edema', 'Consolidation', 'Pneumonia',
#                'Atelectasis', 'Pneumothorax',
#                'Pleural Effusion']
# img_width, img_height = 224, 224
# model_factory = ModelFactory()
# model = model_factory.get_model(class_names,
#                                 model_name=args.model_type,
#                                 use_base_weights=True,
#                                 weights_path=args.model_file_path,
#                                 input_shape=(img_height, img_width, 3))
# optimizer = keras.optimizers.Adam(lr=1e-3, beta_1=0.9, beta_2=0.999)
# model.compile(optimizer=optimizer, loss="binary_crossentropy", metrics=["accuracy"])

print('Evaluating Model...')
df = pd.read_csv(valid_file)
df = df[df['Frontal/Lateral'] == 'Frontal']

# image_path = os.path.join(args.data_dir, 'CheXpert-v1.0-small/Final/Sample Data/Normal.jpeg')
# # Base64 using image path
# with open(image_path, "rb") as image_file:
#     encoded_string = base64.b64encode(image_file.read())
# print(encoded_string)
encoded_string = ""
# probab = predict_single_image(encoded_string, model)
#
# for i in range(len(class_names)):
#     print(class_names[i], ' ', probab[i])

# generate_gradcam(encoded_string, model)

def loadModel():
    img_width, img_height = 224, 224
    model_factory = ModelFactory()
    model = model_factory.get_model(class_names,
                                    model_name="DenseNet121",
                                    use_base_weights=True,
                                    weights_path='./codalab/src/best_weights_1687481048.5704129.h5',
                                    input_shape=(img_height, img_width, 3))
    optimizer = keras.optimizers.Adam(lr=1e-3, beta_1=0.9, beta_2=0.999)
    model.compile(optimizer=optimizer, loss="binary_crossentropy", metrics=["accuracy"])
    return model

model = loadModel()

app = Flask(__name__)

# API route
@app.route('/generate', methods=['POST'])
def generate_gradcam_api():
    # Get base64 string image from the request
    data = request.get_json()
    encoded_string = data.get("image")


    grad_cam64 = ""
    probab = ""
    with graph.as_default():
        grad_cam64 = generate_gradcam(encoded_string, model)
        probab = predict_single_image(encoded_string, model)

    results = []
    for i in range(len(class_names)):
        result = {
            'class_name': class_names[i],
            'probability': float(probab[i])  # Convert `float32` to `float`
        }
        results.append(result)
    print(results)
    # Convert the results list to a JSON string
    json_str = json.dumps(results)

    return jsonify({'gradcam_image': grad_cam64,
                    'classification' : json_str
                    })


# Run the Flask app
if __name__ == '__main__':
    app.run(port=3000)
